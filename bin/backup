#!/bin/bash
# Backup Directories, PostgreSQL, SVN, Trac, to FTP server

### backup strategy ###
# BACKUP_PATH is /home/backup/$HOSTNAME/
# TMP_BACKUP is /tmp/backup/$HOSTNAME
# BackupFile name is $Prefix.$Filename.$DayName.tar.gz
# $Prefix is svn, folder, pgsql
# $Filename is the basename of the folder or the database name
# Full backup is performed everyday
#
# 1. Dump/gz SQL databases to $TMP_BACKUP
# 2. Dump/gz SVN repositories from $SVN_REPOSITORIES to $TMP_BACKUP
# 3. Dump/gz Trac from TRAC_PATH to $BackupDirNew
# 4. Tar/gz local directories to $BackupDirNew
#

### Local options ###
BACKUP_PATH="/home/nicolasm/backup"
BACKUP_DIRECTORIES="/home/www"
SVN_REPOSITORIES="/home/svn/meilleursagents"
TRAC_PATH="/home/trac/meilleursagents"
TMP_BACKUP="/tmp/backup"

EMAILS="julich@meilleursagents.com"

### Backup options ###
BACKUP_PGSQL="1"
BACKUP_SVN="1"
BACKUP_TRAC="1"
BACKUP_DIR="1"
GZIP_LEVEL="5"

### PostgreSQL setup ###
PG_HOST="localhost"
PG_USER="nicolasm"
PG_PASS="user&1e2"

### Trac setup ###

### FTP setup ###
FTP_HOST="ftpback3.ovh.net"
FTP_USER="ns29877.ovh.net"
FTP_PASS="jKIByaHEMjC"

### Commands ###
FTP="$(which pftp)"
GZIP="$(which gzip)"
PGSQL="$(which psql)"
PGSQLDUMP="$(which pg_dump)"
TAR="$(which tar)"
NOW="$(date +%T)"

### Nothing should be modified past this line ###
DAY="$(date +%d.%A)"
LOCAL_DEST="$BACKUP_PATH/$HOSTNAME"

function log {
  echo "$(date +%T)" "$1"
}

function mail_error {
	echo ""
	# T="/tmp/backup.fail"
	# echo "Date: $(date)" > $T
	# echo "Hostname: $HOSTNAME" >> $T
	# echo "Backup failed" >> $T
	# mail -s "Backup failed - $HOSTNAME" "$EMAILS" < $T
	# rm -f $T
}

function backup_directories {
	log "Backing up local directories..."
	for DIRECTORY in $BACKUP_DIRECTORIES
	do
		DIR_NAME=$(basename $DIRECTORY)
		FILE="$TMP_BACKUP/$DAY.folder.$DIR_NAME.tar.gz"
		log "Backing up $DIRECTORY to $FILE"
		tar czf $FILE $DIRECTORY
	done
	log "Local directories backed up."
}

function backup_pgsql {
	log "Backing up PostgreSQL databases..."
	# should ~/.pgpass file, chmod 600, your_host:5432:your_user:your_db:your_pass
	export PGPASSWORD=$PG_PASS 
	DBS="$($PGSQL -h $PG_HOST -U $PG_USER -l -t | awk '{ print $1}' | grep -vE '^-|^List|^Name|template[0|1]')"
	for DB in $DBS
	do
		FILE=$TMP_BACKUP/$DAY.pgsql.$DB.tar.gz
		log "Backing up $DB to $FILE"
		$PGSQLDUMP -h $PG_HOST -U $PG_USER $DB -Ft -b | $GZIP -$GZIP_LEVEL > $FILE
	done
	unset PGPASSWORD
	log "PostgreSQL databases backed up."
}

function backup_svn {
	log "Backing up SVN repositories..."
	for REPOSITORY in $SVN_REPOSITORIES
	do
		DIR_NAME=$(basename $REPOSITORY)
		FILE="$TMP_BACKUP/$DAY.svn.$DIR_NAME.gz"
		log "Backing up $REPOSITORY to $FILE"
		svnadmin dump -q $REPOSITORY | $GZIP -$GZIP_LEVEL > $FILE
	done
	log "SVN repositories backed up."
}

function backup_trac {
	log "Backing up Trac..."
	for DIRECTORY in $TRAC_PATH
	do
		if [ -d $TMP_BACKUP/trac ]; then
			rm -rf $TMP_BACKUP/trac
		fi
		DIR_NAME=$(basename $DIRECTORY)
		trac-admin $DIRECTORY hotcopy $TMP_BACKUP/trac
		FILE=$TMP_BACKUP/$DAY.trac.$DIR_NAME.tar.gz
		$TAR czf $FILE $TMP_BACKUP/trac
		rm -rf $TMP_BACKUP/trac
	done
	log "Trac backed up."
}

function upload_ftp {
	log  "Uploading backup to FTP..."
	$FTP -ni $FTP_HOST << EOF
quote user $FTP_USER
quote pass $FTP_PASS
mkdir $HOSTNAME
cd $HOSTNAME
lcd $TMP_BACKUP
mput *
quit
EOF
	if [ "$?" != "0" ]; then
		mail_error
	fi
	log "Backup sent to FTP."
}

echo "Backup starting..."
log "Backup date: $(date +%Y-%m-%d)"
log "Backup day: $DAY"

if [ -d $TMP_BACKUP ]; then
	log "Deleting previous temp backup"
	rm -rf $TMP_BACKUP/*.gz
	rm -rf $TMP_BACKUP/trac
else
	log "Creating local backup folder"
	mkdir -p $TMP_BACKUP
fi

### PostgreSQL Backup ###
if [ $BACKUP_PGSQL == "1" ]; then
	backup_pgsql
fi

### Trac Backup ###
if [ $BACKUP_TRAC == "1" ]; then
	backup_trac
fi

### Subversion Backup ###
if [ $BACKUP_SVN == "1" ]; then
	backup_svn
fi

### Backup directories ###
if [ $BACKUP_DIRECTORIES == "1" ]; then
	backup_directories
fi

### Upload to FTP ###
upload_ftp

### Keep current backup local ###
log  "Moving temp backup to local repository $LOCAL_DEST."
mv -f $TMP_BACKUP/*.gz $LOCAL_DEST/

log  "Backup finished."
echo "Backup successfull."
